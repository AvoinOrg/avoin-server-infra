# ---------- General ----------
DOMAIN=analytics.example.com
TRAEFIK_CERTRESOLVER=myresolver
DATA_PATH=/srv/umami

# ---------- Umami ----------
# Pin an Umami image tag for Postgres (examples: postgresql-v2, postgresql-v2.18.1)
UMAMI_IMAGE_TAG=postgresql-v2

# Umami DB connection (app reads only DATABASE_URL + HASH_SALT)
POSTGRES_DB=umami
POSTGRES_USER=umami
POSTGRES_PASSWORD=change_me_strong_pw

# Required by Umami
HASH_SALT=generate_a_long_random_string

# Optional hardening / adblock evasion (Umami supports both)
# Tracker script path defaults to /script.js; you can rename it:
TRACKER_SCRIPT_NAME=umami.js
# Ingest endpoint defaults to /api/send; you can shorten it:
COLLECT_API_ENDPOINT=/e

# Optional flags
REMOVE_TRAILING_SLASH=1
DISABLE_TELEMETRY=1

# ---------- oauth2-proxy (Zitadel OIDC) ----------
# Pin oauth2-proxy image
OAUTH2_PROXY_IMAGE_TAG=v7.6.0

# Your public cookie domain (usually same as DOMAIN or parent, e.g. example.com)
COOKIE_DOMAIN=example.com

# allows only users from this domain to log in
# Alternative, you can set it up somehow to use zitadel roles/groups instead
# You can also add multiple domains, in their own variables. Oauth2 proxy supports multiple --email-domain flags.
ALLOWED_EMAIL_DOMAIN=example.com

# ZITADEL OIDC config
# Issuer looks like: https://<your-tenant>.zitadel.cloud or your self-hosted issuer
OIDC_ISSUER_URL=https://your-tenant.zitadel.cloud
OAUTH2_PROXY_CLIENT_ID=your_zitadel_app_client_id
OAUTH2_PROXY_CLIENT_SECRET=your_zitadel_app_client_secret

# Generate a base64url (no padding) 32-byte secret (see docs):
# python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(32)).decode())'
OAUTH2_PROXY_COOKIE_SECRET=base64url_32byte_secret_here
