version: "3.9"

services:
  umami-db:
    image: postgres:16-alpine
    container_name: umami-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ${DATA_PATH}/postgres:/var/lib/postgresql/data
    networks:
      - umami-net

  umami:
    # v2 image for PostgreSQL
    image: ghcr.io/umami-software/umami:${UMAMI_IMAGE_TAG}
    container_name: umami
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # core
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@umami-db:5432/${POSTGRES_DB}
      DATABASE_TYPE: postgresql
      HASH_SALT: ${HASH_SALT}
      # optional quality-of-life
      TRACKER_SCRIPT_NAME: ${TRACKER_SCRIPT_NAME}
      COLLECT_API_ENDPOINT: ${COLLECT_API_ENDPOINT}
      REMOVE_TRAILING_SLASH: ${REMOVE_TRAILING_SLASH}
      DISABLE_TELEMETRY: ${DISABLE_TELEMETRY}
    depends_on:
      - umami-db
    networks:
      - umami-net
      - proxy-net

  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:${OAUTH2_PROXY_IMAGE_TAG}
    container_name: oauth2-proxy-umami
    restart: unless-stopped
    env_file:
      - .env
    command:
      - --provider=oidc
      - --oidc-issuer-url=${OIDC_ISSUER_URL}
      - --client-id=${OAUTH2_PROXY_CLIENT_ID}
      - --client-secret=${OAUTH2_PROXY_CLIENT_SECRET}
      - --cookie-secret=${OAUTH2_PROXY_COOKIE_SECRET}
      - --cookie-secure=true
      - --cookie-samesite=lax
      - --cookie-domain=${COOKIE_DOMAIN}
      - --email-domain=${ALLOWED_EMAIL_DOMAIN}
      - --scope=openid profile email
      - --reverse-proxy=true
      - --http-address=0.0.0.0:4180
      - --upstream=http://umami:3000
      - --skip-auth-route=^/${TRACKER_SCRIPT_NAME}$
      - --skip-auth-route=^${COLLECT_API_ENDPOINT}$
      - --skip-auth-route=^/share/.*$
      - --silence-ping-logging=true
    networks:
      - proxy-net
      - umami-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.umami.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.umami.entrypoints=websecure"
      - "traefik.http.routers.umami.tls.certresolver=myresolver"
      - "traefik.http.services.umami.loadbalancer.server.port=4180"

networks:
  proxy-net:
    external: true
  umami-net:
    driver: bridge
